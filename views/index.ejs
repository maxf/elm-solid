<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
    <h1><%= title %></h1>
    <p>Welcome to <%= title %></p>
    <div id="main"></div>
    <script src="javascripts/elm.js"></script>
    <script src="javascripts/solid-auth-client.bundle.js"></script>
    <script src="javascripts/rdflib.js"></script>
    <script>
     var node = document.getElementById('main');
     var app = Elm.Main.embed(node);

     var tripleStore = $rdf.graph()
     var fetcher = new $rdf.Fetcher(tripleStore, 5000)
     var foaf = $rdf.Namespace("http://xmlns.com/foaf/0.1/")

     app.ports.login.subscribe(function() {
       console.log("OKLOGIN")
       SolidAuthClient
         .popupLogin({ popupUri: 'http://localhost:3000/popup' })
         .then(function (session) {
           console.log("login ok", session)
           app.ports.loginReturn.send(localStorage.getItem('solid-auth-client'));
         })
         .catch(function(err) {
           console.log("login failed", err);
           app.ports.loginReturn.send(null);
         });
     });

     app.ports.logout.subscribe(function() {
       SolidAuthClient
         .logout()
         .then(() =>
           console.log('successfully logged out'),
           app.ports.logoutReturn.send("ok")
         )
         .catch(() =>
           console.log('failed logging out'),
           app.ports.logoutReturn.send(null)
         );
     });

     app.ports.fetchUsername.subscribe(function(webId) {
       // first read the RDF data from the webId
       fetcher.nowOrWhenFetched(webId, function(ok, body, xhr) {
         if (!ok) {
           console.log('filed')
           app.ports.usernameFetchedError.send("Failed to fetch/process "+webId);
         } else {
           // extract the user and their name from the triple store
           console.log('ok')
           const user = $rdf.sym(webId);
           const usernameNode = tripleStore.any(user, foaf('name'))
           if (!usernameNode || usernameNode.termType !== 'Literal') {
             app.ports.usernameFetchedError.send("Didn't find a name for "+webId);
           } else {
             app.ports.usernameFetchedOk.send(usernameNode.value);
           }
         }
       });
     });

     app.ports.localStorageSetItem.subscribe(function(keyValuePair) {
       if (keyValuePair.length !== 2) {
         console.log("bad value passed to localStorageSetItem port", key)
       } else {
         window.localStorage.setItem(keyValuePair[0], keyValuePair[1]);
       }
     });

     app.ports.localStorageRemoveItem.subscribe(function(keyName) {
       console.log("removing item", keyName);
       window.localStorage.removeItem(keyName);
     });

     app.ports.localStorageGetItem.subscribe(function(keyName) {
       var value = window.localStorage.getItem(keyName);
       console.log("getting item", keyName);
       app.ports.localStorageRetrievedItem.send([keyName, value]);
     });
    </script>
  </body>
</html>
